# SConstruct initializing
import os
import sys
Import('env')
Import('mpi')

# Setup
prefix = env['program_prefix']

## Programs
if(env['TEST']):
    hello_cxxopts = env.Program(prefix + 'hello_cxxopts','hello_cxxopts.cpp')
    env.Install('../bin/',hello_cxxopts)

    hello_argparse = env.Program(prefix + 'hello_argparse','hello_argparse.cpp')
    env.Install('../bin/',hello_argparse)

    hello_models = env.Program(prefix + 'hello_models','hello_models.cpp',LIBS=['file', 'model', 'pml', 'waves', 'utils', 'der', 'geometry', 'data', 'sort', 'modelling', 'fft', 'hilbert'])
    env.Install('../bin/',hello_models)

    hello_der = env.Program(prefix + 'hello_der','hello_der.cpp',LIBS=['file', 'model', 'pml', 'waves', 'utils', 'der', 'geometry', 'data', 'sort', 'modelling', 'fft'])
    env.Install('../bin/',hello_der)
    
    hello_acoustic = env.Program(prefix + 'hello_acoustic','hello_acoustic.cpp',LIBS=['file', 'model', 'pml', 'waves', 'utils', 'der', 'geometry', 'data', 'sort', 'modelling', 'snap', 'config4cpp', 'fft'])
    env.Install('../bin/',hello_acoustic)
    
    hello_artm = env.Program(prefix + 'hello_artm','hello_artm.cpp',LIBS=['file', 'model', 'pml', 'waves', 'utils', 'der', 'geometry', 'data', 'sort', 'rtm', 'image', 'snap', 'config4cpp', 'fft'])
    env.Install('../bin/',hello_artm)
    
    hello3d_artm = env.Program(prefix + 'hello3d_artm','hello3d_artm.cpp',LIBS=['file', 'model', 'pml', 'waves', 'utils', 'der', 'geometry', 'data', 'sort', 'rtm', 'image', 'snap', 'config4cpp', 'fft'])
    env.Install('../bin/',hello3d_artm)
    
    hello_elastic = env.Program(prefix + 'hello_elastic','hello_elastic.cpp',LIBS=['file', 'model', 'pml', 'waves', 'utils', 'der', 'geometry', 'data', 'sort', 'modelling', 'snap', 'config4cpp', 'fft'])
    env.Install('../bin/',hello_elastic)
    
    hello3d_acoustic = env.Program(prefix + 'hello3d_acoustic','hello3d_acoustic.cpp',LIBS=['file', 'model', 'pml', 'waves', 'utils', 'der', 'geometry', 'sort', 'data', 'modelling', 'snap', 'config4cpp', 'fft'])
    env.Install('../bin/',hello3d_acoustic)
    
    hello3d_elastic = env.Program(prefix + 'hello3d_elastic','hello3d_elastic.cpp',LIBS=['file', 'model', 'pml', 'waves', 'utils', 'der', 'geometry', 'sort', 'data', 'modelling', 'snap', 'config4cpp', 'fft'])
    env.Install('../bin/',hello3d_elastic)
    
    hello_mada = env.Program(prefix + 'hello_mada','hello_mada.cpp',LIBS=['file', 'model', 'pml', 'waves', 'utils', 'der', 'geometry', 'data', 'sort', 'config4cpp', 'rsfcpp', 'rsfc'])
    env.Install('../bin/',hello_mada)
    
    hello_parser = env.Program(prefix + 'hello_parser','hello_parser.cpp',LIBS=['file', 'model', 'pml', 'waves', 'utils', 'der', 'geometry', 'sort', 'data', 'config4cpp'])
    env.Install('../bin/',hello_parser)
    
    hello_sort = env.Program(prefix + 'hello_sort','hello_sort.cpp',LIBS=['file', 'model', 'pml', 'waves', 'utils', 'der', 'geometry', 'data', 'sort', 'fft'])
    env.Install('../bin/',hello_sort)

    hello_opt = env.Program(prefix + 'hello_opt','hello_opt.cpp', LIBS=['opt'])
    env.Install('../bin',hello_opt)

    #hello_jacob = env.Program(prefix + 'hello_jacob','hello_jacob.cpp', LIBS=['lbfgs', 'file', 'utils', 'geometry', 'model', 'data', 'inparse', 'image'], LIBPATH=['../build', '../config4cpp/lib'])
    #env.Install('../bin',hello_jacob)
    
rsf2rss = env.Program(prefix + 'rsf2rss','rsf2rss.cpp',LIBS=['file', 'model', 'pml', 'waves', 'utils', 'der', 'geometry', 'data', 'config4cpp', 'sort', 'rsfcpp','rsfc'])
env.Install('../bin/',rsf2rss)

rsf2data = env.Program(prefix + 'rsf2data','rsf2data.cpp',LIBS=['file', 'model', 'pml', 'waves', 'utils', 'der', 'geometry', 'data', 'config4cpp', 'sort', 'rsfcpp','rsfc', 'fft'])
env.Install('../bin/',rsf2data)

rss2rsf = env.Program(prefix + 'rss2rsf','rss2rsf.cpp',LIBS=['file', 'model', 'pml', 'waves', 'utils', 'der', 'geometry', 'data', 'sort', 'config4cpp', 'rsfcpp','rsfc'])
env.Install('../bin/',rss2rsf)

segy2rss = env.Program(prefix + 'segy2rss','segy2rss.cpp',LIBS=['file', 'model', 'pml', 'waves', 'utils', 'der', 'geometry', 'data', 'sort', 'rsfcpp', 'rsfc', 'inparse', 'fft'])
env.Install('../bin/',segy2rss)

rss2segy = env.Program(prefix + 'rss2segy','rss2segy.cpp',LIBS=['file', 'model', 'pml', 'waves', 'utils', 'der', 'geometry', 'data', 'sort', 'rsfcpp', 'rsfc', 'inparse', 'fft'])
env.Install('../bin/',rss2segy)

rss2sps = env.Program(prefix + 'rss2sps','rss2sps.cpp',LIBS=['file', 'model', 'pml', 'waves', 'utils', 'der', 'geometry',  'sort', 'rsfcpp', 'rsfc', 'inparse', 'fft', 'data'])
env.Install('../bin/',rss2sps)

info = env.Program(prefix + 'info','info.cpp',LIBS=['file', 'utils','geometry', 'data', 'inparse', 'fft'])
env.Install('../bin/',info)

window = env.Program(prefix + 'window','window.cpp',LIBS=['file', 'utils','geometry', 'data', 'inparse', 'fft'])
env.Install('../bin/',window)

bandpass = env.Program(prefix + 'bandpass','bandpass.cpp',LIBS=['file', 'utils','geometry', 'data', 'inparse', 'fft'])
env.Install('../bin/',bandpass)

makesurvey = env.Program(prefix + 'makesurvey','makesurvey.cpp',LIBS=['file', 'utils','geometry', 'data', 'inparse', 'fft'])
env.Install('../bin/',makesurvey)


Acousticmod2d = env.Program(prefix + 'Acousticmod2d','Acousticmod2d.cpp',LIBS=['file', 'model', 'pml', 'waves', 'utils', 'der', 'geometry', 'sort', 'data', 'modelling', 'interp', 'inparse', 'snap','fft'])
env.Install('../bin/',Acousticmod2d)

Acousticmod3d = env.Program(prefix + 'Acousticmod3d','Acousticmod3d.cpp',LIBS=['file', 'model', 'pml', 'waves', 'utils', 'der', 'geometry', 'sort', 'data', 'modelling', 'interp', 'inparse', 'snap','fft'])
env.Install('../bin/',Acousticmod3d)

Elasticmod2d = env.Program(prefix + 'Elasticmod2d','Elasticmod2d.cpp',LIBS=['file', 'model', 'pml', 'waves', 'utils', 'der', 'geometry', 'sort', 'data', 'modelling', 'interp', 'inparse', 'snap','fft'])
env.Install('../bin/',Elasticmod2d)

Elasticmod3d = env.Program(prefix + 'Elasticmod3d','Elasticmod3d.cpp',LIBS=['file', 'model', 'pml', 'waves', 'utils', 'der', 'geometry', 'sort', 'data', 'modelling', 'interp', 'inparse', 'snap','fft'])
env.Install('../bin/',Elasticmod3d)

if(env['FFTW']):
    hello_fftw = env.Program(prefix + 'hello_fftw','hello_fftw.cpp',LIBS=['fftw3'],LIBPATH=['../build', '../../fftw-3.3.6-pl2/fftw-build/lib/'])
    env.Install('../bin/',hello_fftw)

if(env['MPI']):
    if(env['TEST']):
        mpidbg = mpi.Program(prefix + 'mpidbg','mpidbg.cpp',LIBS=['parallel', 'utils'])
        mpi.Install('../bin/',mpidbg)

        hello_fdgrad = mpi.Program(prefix + 'hello_fdgrad','hello_fdgrad.cpp',LIBS=['inversion', 'file', 'model', 'pml', 'waves', 'utils', 'der', 'geometry', 'sort', 'data', 'fwi', 'parallel', 'interp', 'inparse', 'snap', 'image', 'bspl','fft'])
        mpi.Install('../bin/',hello_fdgrad)

        hello_fft = env.Program(prefix + 'hello_fft','hello_fft.cpp',LIBS=['fft'])
        env.Install('../bin/',hello_fft)

    Acousticfwi2d = mpi.Program(prefix + 'Acousticfwi2d','Acousticfwi2d.cpp',LIBS=['inversion', 'file', 'model', 'pml', 'waves', 'utils', 'der', 'geometry', 'sort', 'data', 'fwi', 'parallel', 'interp', 'inparse', 'snap', 'image', 'opt', 'bspl','fft'])
    mpi.Install('../bin/',Acousticfwi2d)

    Acousticfwi3d = mpi.Program(prefix + 'Acousticfwi3d','Acousticfwi3d.cpp',LIBS=['inversion', 'file', 'model', 'pml', 'waves', 'utils', 'der', 'geometry', 'sort', 'data', 'fwi', 'parallel', 'interp', 'inparse', 'snap', 'image', 'opt', 'bspl','fft'])
    mpi.Install('../bin/',Acousticfwi3d)

    Elasticfwi2d = mpi.Program(prefix + 'Elasticfwi2d','Elasticfwi2d.cpp',LIBS=['inversion', 'file', 'model', 'pml', 'waves', 'utils', 'der', 'geometry', 'sort', 'data', 'fwi', 'parallel', 'interp', 'inparse', 'snap', 'image', 'opt', 'bspl','fft'])
    mpi.Install('../bin/',Elasticfwi2d)

    Elasticfwi3d = mpi.Program(prefix + 'Elasticfwi3d','Elasticfwi3d.cpp',LIBS=['inversion', 'file', 'model', 'pml', 'waves', 'utils', 'der', 'geometry', 'sort', 'data', 'fwi', 'parallel', 'interp', 'inparse', 'snap', 'image', 'opt', 'bspl','fft'])
    mpi.Install('../bin/',Elasticfwi3d)

    Acousticwemva2d = mpi.Program(prefix + 'Acousticwemva2d','Acousticwemva2d.cpp',LIBS=['wemva', 'file', 'model', 'pml', 'waves', 'utils', 'der', 'geometry', 'sort', 'data', 'rtm', 'mva', 'parallel', 'interp', 'inparse', 'snap', 'image', 'opt', 'bspl','fft', 'hilbert'])
    mpi.Install('../bin/',Acousticwemva2d)

    Elasticwemva2d = mpi.Program(prefix + 'Elasticwemva2d','Elasticwemva2d.cpp',LIBS=['wemva', 'file', 'model', 'pml', 'waves', 'utils', 'der', 'geometry', 'sort', 'data', 'rtm', 'mva', 'parallel', 'interp', 'inparse', 'snap', 'image', 'opt', 'bspl','fft', 'hilbert'])
    mpi.Install('../bin/',Elasticwemva2d)

    Acoustictomo2d = mpi.Program(prefix + 'Acoustictomo2d','Acoustictomo2d.cpp',LIBS=['file', 'model', 'pml', 'waves', 'rays', 'utils', 'der', 'geometry', 'sort', 'data', 'tomo', 'fat', 'parallel', 'interp', 'inparse', 'snap', 'image', 'opt', 'bspl','fft'])
    mpi.Install('../bin/',Acoustictomo2d)

    Acoustictomo3d = mpi.Program(prefix + 'Acoustictomo3d','Acoustictomo3d.cpp',LIBS=['file', 'model', 'pml', 'waves', 'rays', 'utils', 'der', 'geometry', 'sort', 'data', 'tomo', 'fat', 'parallel', 'interp', 'inparse', 'snap', 'image', 'opt', 'bspl','fft'])
    mpi.Install('../bin/',Acoustictomo3d)

    Acoustickdmva2d = mpi.Program(prefix + 'Acoustickdmva2d','Acoustickdmva2d.cpp',LIBS=['file', 'model', 'pml', 'kdmva', 'ttable', 'kdmig', 'kdtree', 'rays', 'utils', 'der', 'geometry', 'sort', 'data', 'fat', 'parallel', 'interp', 'inparse', 'snap', 'image', 'opt', 'bspl','fft', 'hilbert'])
    mpi.Install('../bin/',Acoustickdmva2d)

    Acousticlsrtm2d = mpi.Program(prefix + 'Acousticlsrtm2d','Acousticlsrtm2d.cpp',LIBS=['lsmiginv', 'file', 'model', 'pml', 'waves', 'utils', 'der', 'geometry', 'sort', 'data', 'lsrtm', 'parallel', 'interp', 'inparse', 'snap', 'image', 'opt', 'bspl','fft', 'hilbert'])
    mpi.Install('../bin/',Acousticlsrtm2d)

    AcousticlsMrtm2d = mpi.Program(prefix + 'AcousticlsMrtm2d','AcousticlsMrtm2d.cpp',LIBS=['lsmiginv', 'file', 'model', 'pml', 'waves', 'utils', 'der', 'geometry', 'sort', 'data', 'lsrtm', 'parallel', 'interp', 'inparse', 'snap', 'image', 'opt', 'bspl','fft', 'hilbert'])
    mpi.Install('../bin/',AcousticlsMrtm2d)

    mpiAcousticfat2d = mpi.Program(prefix + 'mpiAcousticfat2d','mpiAcousticfat2d.cpp',LIBS=['file', 'model', 'waves', 'pml', 'rays', 'utils', 'der', 'geometry', 'sort', 'data', 'parallel', 'interp', 'inparse', 'snap', 'fft'])
    mpi.Install('../bin/',mpiAcousticfat2d)

    mpiAcousticfat3d = mpi.Program(prefix + 'mpiAcousticfat3d','mpiAcousticfat3d.cpp',LIBS=['file', 'model', 'waves', 'pml', 'rays', 'utils', 'der', 'geometry', 'sort', 'data', 'parallel', 'interp', 'inparse', 'snap', 'fft'])
    mpi.Install('../bin/',mpiAcousticfat3d)

    mpiAcousticmod2d = mpi.Program(prefix + 'mpiAcousticmod2d','mpiAcousticmod2d.cpp',LIBS=['file', 'model', 'pml', 'waves', 'utils', 'der', 'geometry', 'sort', 'data', 'modelling', 'parallel', 'interp', 'inparse', 'snap', 'fft'])
    mpi.Install('../bin/',mpiAcousticmod2d)

    mpiAcousticredat2d = mpi.Program(prefix + 'mpiAcousticredat2d','mpiAcousticredat2d.cpp',LIBS=['file', 'model', 'pml', 'waves', 'utils', 'der', 'geometry', 'sort', 'data', 'modelling', 'parallel', 'interp', 'inparse', 'snap', 'fft'])
    mpi.Install('../bin/',mpiAcousticredat2d)
    
    mpiAcousticmod3d = mpi.Program(prefix + 'mpiAcousticmod3d','mpiAcousticmod3d.cpp',LIBS=['file', 'model', 'pml', 'waves', 'utils', 'der', 'geometry', 'sort', 'data', 'modelling', 'parallel', 'interp', 'inparse', 'snap', 'fft'])
    mpi.Install('../bin/',mpiAcousticmod3d)

    mpiAcousticredat3d = mpi.Program(prefix + 'mpiAcousticredat3d','mpiAcousticredat3d.cpp',LIBS=['file', 'model', 'pml', 'waves', 'utils', 'der', 'geometry', 'sort', 'data', 'modelling', 'parallel', 'interp', 'inparse', 'snap', 'fft'])
    mpi.Install('../bin/',mpiAcousticredat3d)
    
    mpiElasticmod2d = mpi.Program(prefix + 'mpiElasticmod2d','mpiElasticmod2d.cpp',LIBS=['file', 'model', 'pml', 'waves', 'utils', 'der', 'geometry', 'sort', 'data', 'modelling', 'parallel', 'interp', 'inparse', 'snap', 'fft'])
    mpi.Install('../bin/',mpiElasticmod2d)
    
    mpiElasticmod3d = mpi.Program(prefix + 'mpiElasticmod3d','mpiElasticmod3d.cpp',LIBS=['file', 'model', 'pml', 'waves', 'utils', 'der', 'geometry', 'sort', 'data', 'modelling', 'parallel', 'interp', 'inparse', 'snap', 'fft'])
    mpi.Install('../bin/',mpiElasticmod3d)
    
    mpiAcousticrtm2d = mpi.Program(prefix + 'mpiAcousticrtm2d','mpiAcousticrtm2d.cpp',LIBS=['file', 'model', 'pml', 'waves', 'utils', 'der', 'geometry', 'sort', 'data', 'rtm', 'parallel', 'interp', 'inparse', 'snap', 'image', 'fft'])
    mpi.Install('../bin/',mpiAcousticrtm2d)

    mpiAcousticMrtm2d = mpi.Program(prefix + 'mpiAcousticMrtm2d','mpiAcousticMrtm2d.cpp',LIBS=['file', 'model', 'pml', 'waves', 'utils', 'der', 'geometry', 'sort', 'data', 'rtm', 'parallel', 'interp', 'inparse', 'snap', 'image', 'fft'])
    mpi.Install('../bin/',mpiAcousticMrtm2d)

    mpiAcousticrtm3d = mpi.Program(prefix + 'mpiAcousticrtm3d','mpiAcousticrtm3d.cpp',LIBS=['file', 'model', 'pml', 'waves', 'utils', 'der', 'geometry', 'sort', 'data', 'rtm', 'parallel', 'interp', 'inparse', 'snap', 'image', 'fft'])
    mpi.Install('../bin/',mpiAcousticrtm3d)
    
    mpiElasticrtm2d = mpi.Program(prefix + 'mpiElasticrtm2d','mpiElasticrtm2d.cpp',LIBS=['file', 'model', 'pml', 'waves', 'utils', 'der', 'geometry', 'sort', 'data', 'rtm', 'parallel', 'interp', 'inparse', 'snap', 'image', 'fft'])
    mpi.Install('../bin/',mpiElasticrtm2d)

    mpiElasticrtm3d = mpi.Program(prefix + 'mpiElasticrtm3d','mpiElasticrtm3d.cpp',LIBS=['file', 'model', 'pml', 'waves', 'utils', 'der', 'geometry', 'sort', 'data', 'rtm', 'parallel', 'interp', 'inparse', 'snap', 'image', 'fft'])
    mpi.Install('../bin/',mpiElasticrtm3d)

    mpiAcousticttable2d = mpi.Program(prefix + 'mpiAcousticttable2d','mpiAcousticttable2d.cpp',LIBS=['file', 'model', 'waves', 'pml', 'rays', 'ttable', 'utils', 'der', 'geometry', 'sort', 'data', 'parallel', 'interp', 'inparse', 'snap', 'fft', 'kdtree'])
    mpi.Install('../bin/',mpiAcousticttable2d)

    mpiElasticttable2d = mpi.Program(prefix + 'mpiElasticttable2d','mpiElasticttable2d.cpp',LIBS=['file', 'model', 'waves', 'pml', 'rays', 'ttable', 'utils', 'der', 'geometry', 'sort', 'data', 'parallel', 'interp', 'inparse', 'snap', 'fft', 'kdtree'])
    mpi.Install('../bin/',mpiElasticttable2d)

    mpiAcoustickdmig2d = mpi.Program(prefix + 'mpiAcoustickdmig2d','mpiAcoustickdmig2d.cpp',LIBS=['file', 'model', 'pml', 'waves', 'utils', 'der', 'ttable', 'geometry', 'sort', 'data', 'kdmig', 'parallel', 'interp', 'inparse', 'snap', 'image', 'fft', 'kdtree'])
    mpi.Install('../bin/',mpiAcoustickdmig2d)

    mpiElastickdmig2d = mpi.Program(prefix + 'mpiElastickdmig2d','mpiElastickdmig2d.cpp',LIBS=['file', 'model', 'pml', 'waves', 'utils', 'der', 'ttable', 'geometry', 'sort', 'data', 'kdmig', 'parallel', 'interp', 'inparse', 'snap', 'image', 'fft', 'kdtree'])
    mpi.Install('../bin/',mpiElastickdmig2d)
