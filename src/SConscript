# Scons input file for building programs

import os
import sys
Import('env')
Import('mpi')
Import('gpu')

# Get prefix
prefix = env['program_prefix']


#------------------------------------------------------------------
# Single node cpu programs 
#------------------------------------------------------------------
    
libs     = ['file',       'model', 'pml',      'waves', 
            'utils',      'der',   'geometry', 'data', 
            'config4cpp', 'sort',  'rsfcpp',   'rsfc',
            'ballocpu']
rsf2rss  = env.Program(prefix + 'rsf2rss','rsf2rss.cpp', LIBS=libs)
env.Install('../bin/',rsf2rss)

libs     = ['file',       'model', 'pml',      'waves', 
            'utils',      'der',   'geometry', 'data',  
            'config4cpp', 'sort',  'rsfcpp',   'rsfc',  
            'fft',        'ballocpu']
rsf2data = env.Program(prefix + 'rsf2data','rsf2data.cpp',LIBS=libs)
env.Install('../bin/',rsf2data)

libs     = ['file',       'model', 'pml',      'waves', 
            'utils',      'der',   'geometry', 'data',  
            'config4cpp', 'sort',  'rsfcpp',   'rsfc',  
            'fft',        'ballocpu']
rss2rsf  = env.Program(prefix + 'rss2rsf','rss2rsf.cpp',LIBS=libs)
env.Install('../bin/',rss2rsf)

libs     = ['file',  'model',  'pml',      'waves', 
            'utils', 'der',    'geometry', 'data',   
            'sort',  'rsfcpp', 'rsfc',     'inparse',
            'fft',   'ballocpu']
segy2rss = env.Program(prefix + 'segy2rss','segy2rss.cpp',LIBS=libs)
env.Install('../bin/',segy2rss)

libs     = ['file',     'model',  'pml',      'waves',  
            'utils',    'der',    'geometry', 'data',  
            'sort',     'rsfcpp', 'rsfc',     'inparse', 
            'fft',      'ballocpu']
rss2segy = env.Program(prefix + 'rss2segy','rss2segy.cpp',LIBS=libs)
env.Install('../bin/',rss2segy)

libs     = ['file',  'model',  'pml',       'waves',   
            'utils', 'der',    'geometry',  'sort', 
            'rsfcpp', 'rsfc',  'inparse',   'fft',   
            'data',   'ballocpu']
rss2sps  = env.Program(prefix + 'rss2sps','rss2sps.cpp',LIBS=libs)
env.Install('../bin/',rss2sps)

libs     = ['file', 'utils','geometry', 'data', 'inparse', 'fft']
info     = env.Program(prefix + 'info','info.cpp',LIBS=libs)
env.Install('../bin/',info)

libs     = ['file', 'utils','geometry', 'data', 'inparse', 'fft']
window   = env.Program(prefix + 'window','window.cpp',LIBS=libs)
env.Install('../bin/',window)

libs     = ['file', 'utils','geometry', 'data', 'inparse', 'fft']
bandpass = env.Program(prefix + 'bandpass','bandpass.cpp',LIBS=libs)
env.Install('../bin/',bandpass)

libs     = ['file', 'utils','geometry', 'data', 'inparse', 'fft']
mutedata = env.Program(prefix + 'mutedata','mutedata.cpp',LIBS=libs)
env.Install('../bin/',mutedata)

libs     = ['file', 'utils','geometry', 'data', 'inparse', 'fft']
st1d     = env.Program(prefix + 'st1d','st1d.cpp',LIBS=libs)
env.Install('../bin/',st1d)

libs       = ['file', 'utils','geometry', 'data', 'inparse', 'fft']
makesurvey = env.Program(prefix + 'makesurvey','makesurvey.cpp',LIBS=libs)
env.Install('../bin/',makesurvey)

if env['FFTW']:
    libs       = ['fft3w']
    libpath    = ['../build', '../../fftw-3.3.6-pl2/fftw-build/lib/']
    hello_fftw = env.Program(prefix + 'hello_fftw','hello_fftw.cpp',
                             LIBS=libs,LIBPATH=libpath)
    env.Install('../bin/',hello_fftw)


#------------------------------------------------------------------
# Single node cpu programs referencing mpi functions 
#------------------------------------------------------------------
if mpi['ON'] == True :
    libs              = ['file',       'model',     'pml',       'waves',   
                         'utils',      'der',       'geometry',  'sort',  
                         'data',       'parallel',  'modelling', 'snap', 
                         'config4cpp', 'fft',       'ballocpu']
                         
    hello3d_acoustic  = mpi.Program(prefix + 'hello3d_acoustic',
                                    'hello3d_acoustic.cpp', LIBS=libs)
    mpi.Install('../bin/',hello3d_acoustic)

    libs              = ['file',      'model', 'pml',      'waves',
                         'utils',     'der',   'data',     'parallel',  
                         'sort',      'rtm',   'image',    'snap', 
                         'config4cpp','fft',   'geometry', 'ballocpu']   
    hello3d_artm      = mpi.Program(prefix + 'hello3d_artm',
                                    'hello3d_artm.cpp', LIBS=libs)
    mpi.Install('../bin/',hello3d_artm)

    libs              = ['file',     'model', 'pml',      'waves',    
                         'utils',    'der',   'geometry', 'data',
                         'parallel', 'sort',  'modelling', 'fft', 
                         'hilbert',  'ballocpu'] 
                         
    hello_models      = mpi.Program(prefix + 'hello_models','hello_models.cpp',
                                    LIBS=libs)
    mpi.Install('../bin/',hello_models)

    libs              = ['file',     'model',     'pml',   'waves', 
                         'utils',    'geometry',  'data',  'parallel', 
                         'sort',     'modelling', 'fft',   'der', 
                         'ballocpu'] 
    hello_der         = mpi.Program(prefix + 'hello_der','hello_der.cpp',
                                    LIBS=libs)
    mpi.Install('../bin/',hello_der)

    libs              =  ['file',       'model', 'pml',        'waves', 
                          'geometry',   'data',  'parallel',   'sort', 
                          'modelling',  'utils', 'der',        'snap',  
                          'config4cpp', 'fft',   'ballocpu']
    hello_acoustic    = mpi.Program(prefix + 'hello_acoustic',
                                     'hello_acoustic.cpp',LIBS=libs)
    mpi.Install('../bin/',hello_acoustic)

    libs               = ['file',     'model',      'pml',      'waves', 
                          'utils',    'der',        'geometry', 'data', 
                          'parallel', 'sort',       'rtm',      'image', 
                          'snap',     'config4cpp', 'fft',      'ballocpu']
    hello_artm         = mpi.Program(prefix + 'hello_artm',
                                     'hello_artm.cpp',LIBS=libs)
    mpi.Install('../bin/',hello_artm)

    libs               = ['file',       'model', 'pml',      'waves', 
                          'utils',      'der',   'geometry', 'data', 
                          'parallel',   'sort',  'modelling', 'snap', 
                          'config4cpp', 'fft',   'ballocpu']

    hello_elastic      = mpi.Program(prefix + 'hello_elastic',
                                     'hello_elastic.cpp',LIBS=libs)
    mpi.Install('../bin/',hello_elastic)

    libs               = ['file',       'model',    'pml',       'waves', 
                          'utils',      'der',      'geometry',  'sort', 
                          'data',       'parallel', 'modelling', 'snap', 
                          'config4cpp', 'fft',      'ballocpu']
    hello3d_elastic    = mpi.Program(prefix + 'hello3d_elastic',
                         'hello3d_elastic.cpp',LIBS=libs)
    mpi.Install('../bin/',hello3d_elastic)

    libs               = ['file',    'model',      'pml',      'waves', 
                          'utils',   'der',        'geometry', 'sort', 
                          'data',    'parallel',   'modelling', 'interp', 
                          'inparse', 'snap','fft', 'ballocpu']
    Acousticmod2d = mpi.Program(prefix + 'Acousticmod2d',
                                'Acousticmod2d.cpp', LIBS=libs)
    mpi.Install('../bin/', Acousticmod2d)

    libs               = ['file',    'model', 'pml',         'waves', 
                          'utils',   'der',        'geometry',    'sort', 
                          'data',    'parallel',   'modelling', 'interp', 
                          'inparse', 'snap','fft', 'ballocpu']
    Acousticmod3d = mpi.Program(prefix + 'Acousticmod3d',
                                'Acousticmod3d.cpp',LIBS=libs)
    mpi.Install('../bin/', Acousticmod3d)

    libs              = ['file',    'model',      'pml',      'waves', 
                         'utils',   'der',        'geometry', 'sort', 
                         'data',    'parallel',   'modelling', 'interp', 
                         'inparse', 'snap','fft', 'ballocpu']
    Elasticmod2d = mpi.Program(prefix + 'Elasticmod2d',
                               'Elasticmod2d.cpp',LIBS=libs)
    mpi.Install('../bin/', Elasticmod2d)

    libs              = ['file',    'model',      'pml',      'waves', 
                         'utils',   'der',        'geometry', 'sort', 
                         'data',    'parallel',   'modelling', 'interp', 
                         'inparse', 'snap','fft', 'ballocpu']
    Elasticmod3d = mpi.Program(prefix + 'Elasticmod3d',
                               'Elasticmod3d.cpp',LIBS=libs)
    mpi.Install('../bin/',Elasticmod3d)



    libs          = ['inversion', 'file',    'model', 'pml', 
                     'waves',     'utils',   'der',   'derd', 'geometry', 
                     'sort',      'data',    'fwi',   'parallel', 
                     'interp',    'inparse', 'snap',  'image', 
                     'opt',       'bspl',    'fft', 'ballocpu']
    Acousticfwi3d = mpi.Program(prefix + 'Acousticfwi3d',
                                'Acousticfwi3d.cpp', LIBS=libs)
    mpi.Install('../bin/',Acousticfwi3d)

    libs          = ['inversion', 'file',    'model', 'pml', 
                     'waves',     'utils',   'der', 'derd', 'geometry', 
                     'sort',      'data',    'fwi',   'parallel', 
                     'interp',    'inparse', 'snap', 'image', 
                     'opt',       'bspl',    'fft',  'ballocpu']

    Elasticfwi2d  = mpi.Program(prefix + 'Elasticfwi2d',
                               'Elasticfwi2d.cpp',LIBS=libs)
    mpi.Install('../bin/',Elasticfwi2d)

    Elasticfwi3d = mpi.Program(prefix + 'Elasticfwi3d',
                               'Elasticfwi3d.cpp',LIBS=libs)
    mpi.Install('../bin/',Elasticfwi3d)


    Velasticfwi2d   = mpi.Program(prefix + 'Velasticfwi2d',
                                'Velasticfwi2d.cpp',LIBS=libs)
    mpi.Install('../bin/',Velasticfwi2d)

    libs            = ['wemva',    'file',  'model', 'pml', 
                       'waves',    'utils', 'der',   'derd','geometry', 
                       'sort',     'data',  'rtm',   'mva', 
                       'parallel', 'interp', 'inparse', 'snap', 
                       'image',    'opt',   'bspl',    'fft', 
                       'hilbert',  'ballocpu']
    Acousticwemva2d = mpi.Program(prefix + 'Acousticwemva2d',
                                  'Acousticwemva2d.cpp',LIBS=libs)
    mpi.Install('../bin/',Acousticwemva2d)


    Elasticwemva2d = mpi.Program(prefix + 'Elasticwemva2d',
                                 'Elasticwemva2d.cpp',LIBS=libs)
    mpi.Install('../bin/',Elasticwemva2d)

    libs            = ['file',     'model', 'pml',      'waves', 
                       'rays',     'utils', 'der',  'derd'  ,  'geometry', 
                       'sort',     'data',  'tomo',     'fat', 
                       'parallel', 'interp', 'inparse', 'snap', 
                       'image',    'opt',    'bspl',    'fft', 
                       'ballocpu']
    Acoustictomo2d = mpi.Program(prefix + 'Acoustictomo2d',
                                 'Acoustictomo2d.cpp',LIBS=libs)
    mpi.Install('../bin/',Acoustictomo2d)

    Acoustictomo3d = mpi.Program(prefix + 'Acoustictomo3d',
                                 'Acoustictomo3d.cpp',LIBS=libs)
    mpi.Install('../bin/',Acoustictomo3d)


    libs            = ['file',   'model', 'pml',    'kdmva', 
                       'ttable', 'kdmig', 'kdtree', 'rays', 
                       'utils', 'der', 'derd','geometry', 'sort', 
                       'data', 'fat', 'parallel', 'interp', 
                       'inparse', 'snap', 'image', 'opt', 
                       'bspl','fft', 'hilbert', 'ballocpu']
    Acoustickdmva2d = mpi.Program(prefix + 'Acoustickdmva2d',
                                  'Acoustickdmva2d.cpp',LIBS=libs)
    mpi.Install('../bin/', Acoustickdmva2d)

    libs            = ['lsmiginv', 'file',    'model', 'pml', 
                       'waves',    'utils',   'der',   'derd', 'geometry', 
                       'sort',     'data',    'lsrtm', 'parallel', 
                       'interp',   'inparse', 'snap',  'image', 
                       'opt',      'bspl',    'fft',   'hilbert',
                       'ballocpu']
    Acousticlsrtm2d = mpi.Program(prefix + 'Acousticlsrtm2d',
                                  'Acousticlsrtm2d.cpp',LIBS=libs)
    mpi.Install('../bin/', Acousticlsrtm2d)


    AcousticlsMrtm2d = mpi.Program(prefix + 'AcousticlsMrtm2d',
                                   'AcousticlsMrtm2d.cpp',LIBS=libs)
    mpi.Install('../bin/',AcousticlsMrtm2d)

#------------------------------------------------------------------
# Multi node cpu programs 
#------------------------------------------------------------------

    libs             = ['file',    'model', 'waves',   'pml', 
                        'rays',    'utils', 'der', 'derd',    'geometry', 
                        'sort',    'data',  'parallel', 'interp', 
                        'inparse', 'snap',  'fft', 'ballocpu']
    mpiAcousticfat2d = mpi.Program(prefix + 'mpiAcousticfat2d',
                                   'mpiAcousticfat2d.cpp',LIBS=libs)
    mpi.Install('../bin/',mpiAcousticfat2d)

    mpiAcousticfat3d = mpi.Program(prefix + 'mpiAcousticfat3d',
                                   'mpiAcousticfat3d.cpp',LIBS=libs)
    mpi.Install('../bin/',mpiAcousticfat3d)

    libs             = ['file',      'model',    'waves',   'pml', 
                        'rays',      'utils',    'der',     'geometry', 
                        'sort',      'data',     'parallel', 'interp', 
                        'modelling', 'inparse',  'snap',     'fft',
                        'ballocpu']
    mpiAcousticredat2d = mpi.Program(prefix + 'mpiAcousticredat2d',
                                     'mpiAcousticredat2d.cpp',LIBS=libs)
    mpi.Install('../bin/',mpiAcousticredat2d)
    
    mpiAcousticmod2d   = mpi.Program(prefix + 'mpiAcousticmod2d',
                                   'mpiAcousticmod2d.cpp',LIBS=libs)
    mpi.Install('../bin/',mpiAcousticmod2d)

    mpiAcousticmod3d   = mpi.Program(prefix + 'mpiAcousticmod3d',
                                   'mpiAcousticmod3d.cpp',LIBS=libs)
    mpi.Install('../bin/',mpiAcousticmod3d)

    mpiAcousticredat3d = mpi.Program(prefix + 'mpiAcousticredat3d',
                                     'mpiAcousticredat3d.cpp',LIBS=libs)
    mpi.Install('../bin/',mpiAcousticredat3d)

    mpiElasticmod2d    = mpi.Program(prefix + 'mpiElasticmod2d',
                                     'mpiElasticmod2d.cpp',LIBS=libs)
    mpi.Install('../bin/',mpiElasticmod2d)

    mpiVtimod2d        = mpi.Program(prefix + 'mpiVtimod2d',
                                     'mpiVtimod2d.cpp',LIBS=libs)
    mpi.Install('../bin/',mpiVtimod2d)

    mpiVelasticmod2d   = mpi.Program(prefix + 'mpiVelasticmod2d',
                                     'mpiVelasticmod2d.cpp',LIBS=libs)
    mpi.Install('../bin/',mpiVelasticmod2d)

    mpiPoroelasticmod2d = mpi.Program(prefix + 'mpiPoroelasticmod2d',
                                      'mpiPoroelasticmod2d.cpp',LIBS=libs)
    mpi.Install('../bin/',mpiPoroelasticmod2d)

    mpiElasticmod3d     = mpi.Program(prefix + 'mpiElasticmod3d',
                                      'mpiElasticmod3d.cpp',LIBS=libs)
    mpi.Install('../bin/',mpiElasticmod3d)

    mpiVelasticmod3d    = mpi.Program(prefix + 'mpiVelasticmod3d',
                                      'mpiVelasticmod3d.cpp',LIBS=libs)
    mpi.Install('../bin/',mpiVelasticmod3d)

    mpiOrthomod3d       = mpi.Program(prefix + 'mpiOrthomod3d',
                                      'mpiOrthomod3d.cpp',LIBS=libs)
    mpi.Install('../bin/',mpiOrthomod3d)
    
    libs                = ['file',    'model', 'pml',      'waves', 
                           'utils',   'der',   'geometry', 'sort', 
                           'data',    'rtm',   'parallel', 'interp', 
                           'inparse', 'snap',  'image',     'fft', 
                           'ballocpu']
    mpiAcousticrtm2d    = mpi.Program(prefix + 'mpiAcousticrtm2d',
                                   'mpiAcousticrtm2d.cpp',LIBS=libs)
    mpi.Install('../bin/',mpiAcousticrtm2d)

    mpiAcousticMrtm2d   = mpi.Program(prefix + 'mpiAcousticMrtm2d',
                                      'mpiAcousticMrtm2d.cpp',LIBS=libs)
    mpi.Install('../bin/',mpiAcousticMrtm2d)

    mpiAcousticrtm3d    = mpi.Program(prefix + 'mpiAcousticrtm3d',
                                   'mpiAcousticrtm3d.cpp',LIBS=libs)
    mpi.Install('../bin/',mpiAcousticrtm3d)
    

    mpiElasticrtm2d     = mpi.Program(prefix + 'mpiElasticrtm2d',
                                  'mpiElasticrtm2d.cpp',LIBS=libs)
    mpi.Install('../bin/',mpiElasticrtm2d)

    
    mpiElasticrtm3d     = mpi.Program(prefix + 'mpiElasticrtm3d',
                                 'mpiElasticrtm3d.cpp',LIBS=libs)
    mpi.Install('../bin/',mpiElasticrtm3d)

    mpiVtirtm2d         = mpi.Program(prefix + 'mpiVtirtm2d',
                                      'mpiVtirtm2d.cpp',LIBS=libs)
    mpi.Install('../bin/',mpiVtirtm2d)


    mpiOrthortm3d       = mpi.Program(prefix + 'mpiOrthortm3d',
                                     'mpiOrthortm3d.cpp',LIBS=libs)
    mpi.Install('../bin/',mpiOrthortm3d)

    libs                = ['file', 'model',    'waves', 'pml', 
                           'rays', 'ttable',   'utils', 'der', 
                           'geometry', 'sort', 'data',  'parallel', 
                           'interp', 'inparse', 'snap', 'fft', 
                           'kdtree', 'ballocpu']
    mpiAcousticttable2d = mpi.Program(prefix + 'mpiAcousticttable2d',
                                      'mpiAcousticttable2d.cpp',LIBS=libs)
    mpi.Install('../bin/',mpiAcousticttable2d)

    mpiAcousticttable3d = mpi.Program(prefix + 'mpiAcousticttable3d',
                                      'mpiAcousticttable3d.cpp',LIBS=libs)
    mpi.Install('../bin/',mpiAcousticttable3d)

    mpiElasticttable2d  = mpi.Program(prefix + 'mpiElasticttable2d',
                                     'mpiElasticttable2d.cpp',LIBS=libs)
    mpi.Install('../bin/',mpiElasticttable2d)

    libs                = ['file', 'model',    'waves', 'pml', 
                           'rays', 'ttable',   'utils', 'der', 
                           'geometry', 'sort', 'data',  'parallel', 
                           'interp', 'inparse', 'snap', 'fft', 
                           'kdtree', 'ballocpu','kdmig', 'image']

    mpiAcoustickdmig2d  = mpi.Program(prefix + 'mpiAcoustickdmig2d',
                                      'mpiAcoustickdmig2d.cpp',LIBS=libs)
    mpi.Install('../bin/',mpiAcoustickdmig2d)

    mpiAcoustickdmig3d  = mpi.Program(prefix + 'mpiAcoustickdmig3d',
                                      'mpiAcoustickdmig3d.cpp',LIBS=libs)
    mpi.Install('../bin/',mpiAcoustickdmig3d)

    mpiElastickdmig2d   = mpi.Program(prefix + 'mpiElastickdmig2d',
                                      'mpiElastickdmig2d.cpp',LIBS=libs)
    mpi.Install('../bin/',mpiElastickdmig2d)

    mpiAcoustickddemig2d = mpi.Program(prefix + 'mpiAcoustickddemig2d',
                                       'mpiAcoustickddemig2d.cpp',LIBS=libs)
    mpi.Install('../bin/',mpiAcoustickddemig2d)

    mpiAcoustickddemig3d = mpi.Program(prefix + 'mpiAcoustickddemig3d',
                          'mpiAcoustickddemig3d.cpp',LIBS=libs)
    mpi.Install('../bin/',mpiAcoustickddemig3d)

    libs          = ['inversion', 'file',    'model', 'pml', 
                     'waves',     'utils',   'der',  'derd', 'geometry',     
                     'sort',      'data',    'fwi',   'parallel',     
                     'interp',    'inparse', 'snap',  'image',  
                     'opt',       'bspl',    'fft',   'ballocpu']
                     
    Acousticfwi2d = mpi.Program(prefix + 'Acousticfwi2d',
                                'Acousticfwi2d.cpp', LIBS=libs)
    mpi.Install('../bin/',Acousticfwi2d)

#------------------------------------------------------------------
# Multi node gpu programs 
#------------------------------------------------------------------
    libs                     = ['file',     'model',   'pml',      'modellingpu', 
                                'wavesgpu', 'utils',   'dergpu',   'derd', 'geometry', 
                                'sort',     'data',    'parallel', 'pml',
                                'interp',   'inparse', 'snap',     'fft',
                                'mpi',      'mpi_cxx', 'pthread',  'ballocgpu']
    mpiAcousticredat2dgpuObj = gpu.Object('mpiAcousticredat2dgpu',
                                          'mpiAcousticredat2d.cpp')
    mpiAcousticredat2dgpu    = gpu.Program(prefix + 'mpiAcousticredat2dgpu',
                                      mpiAcousticredat2dgpuObj, LIBS=libs)
    mpi.Install('../bin/', mpiAcousticredat2dgpu)


    mpiAcousticmod2dgpuObj   = gpu.Object('mpiAcousticmod2dgpu',
                                          'mpiAcousticmod2d.cpp')
    mpiAcousticmod2dgpu      = gpu.Program(prefix + 'mpiAcousticmod2dgpu',
                                      mpiAcousticmod2dgpuObj, LIBS=libs)
    mpi.Install('../bin/', mpiAcousticmod2dgpu)

    Acousticmod2dgpuObj   = gpu.Object('Acousticmod2dgpu',
                                          'Acousticmod2d.cpp')
    Acousticmod2dgpu      = gpu.Program(prefix + 'Acousticmod2dgpu',
                                      Acousticmod2dgpuObj, LIBS=libs)
    mpi.Install('../bin/', Acousticmod2dgpu)


    mpiElasticmod2dgpuObj   = gpu.Object('mpiElasticmod2dgpu',
                                          'mpiElasticmod2d.cpp')
    mpiElasticmod2dgpu      = gpu.Program(prefix + 'mpiElasticmod2dgpu',
                                      mpiElasticmod2dgpuObj, LIBS=libs)
    mpi.Install('../bin/', mpiElasticmod2dgpu)


    mpiVtimod2dgpuObj       = gpu.Object('mpiVtimod2dgpu',
                                          'mpiVtimod2d.cpp')
    mpiVtimod2dgpu          = gpu.Program(prefix + 'mpiVtimod2dgpu',
                                      mpiVtimod2dgpuObj, LIBS=libs)
    mpi.Install('../bin/', mpiVtimod2dgpu)


    mpiVelasticmod2dgpuObj  = gpu.Object('mpiVelasticmod2dgpu',
                                          'mpiVelasticmod2d.cpp')
    mpiVelasticmod2dgpu     = gpu.Program(prefix + 'mpiVelasticmod2dgpu',
                                      mpiVelasticmod2dgpuObj, LIBS=libs)
    mpi.Install('../bin/', mpiVelasticmod2dgpu)


    mpiPoroelasticmod2dgpuObj = gpu.Object('mpiPoroelasticmod2dgpu',
                                          'mpiPoroelasticmod2d.cpp')
    mpiPoroelasticmod2dgpu    = gpu.Program(prefix + 'mpiPoroelasticmod2dgpu',
                                      mpiPoroelasticmod2dgpuObj, LIBS=libs)
    mpi.Install('../bin/', mpiPoroelasticmod2dgpu)

    libs                      = ['lsmiginv', 'file',    'model',    'pml', 
                                 'waves',    'utils',   'der',      'derd','geometry', 
                                 'sort',     'data',    'lsrtm',    'parallel', 
                                 'interp',   'inparse', 'snap',     'image', 
                                 'opt',      'bspl',    'fft',      'hilbert',
                                 'ballocgpu',' pthread', 'mpi_cxx', 'mpi',
                                 'rtm']
    mpiAcousticrtm2dgpuObj   = gpu.Object('mpiAcousticrtm2dgpu',
                                          'mpiAcousticrtm2d.cpp')
    mpiAcousticrtm2dgpu      = gpu.Program(prefix + 'mpiAcousticrtm2dgpu',
                                      mpiAcousticrtm2dgpuObj, LIBS=libs)
    mpi.Install('../bin/', mpiAcousticrtm2dgpu)


    mpiElasticrtm2dgpuObj   = gpu.Object('mpiElasticrtm2dgpu',
                                          'mpiElasticrtm2d.cpp')
    mpiElasticrtm2dgpu      = gpu.Program(prefix + 'mpiElasticrtm2dgpu',
                                      mpiElasticrtm2dgpuObj, LIBS=libs)
    mpi.Install('../bin/', mpiElasticrtm2dgpu)

    mpiVtirtm2dgpuObj   = gpu.Object('mpiVtirtm2dgpu',
                                          'mpiVtirtm2d.cpp')
    mpiVtirtm2dgpu      = gpu.Program(prefix + 'mpiVtirtm2dgpu',
                                      mpiVtirtm2dgpuObj, LIBS=libs)
    mpi.Install('../bin/', mpiVtirtm2dgpu)

    libs          = ['inversion', 'file',    'model', 'pml', 
                     'wavesgpu',     'utils',   'dergpu',  'derd', 'geometry',     
                     'sort',      'data',    'fwigpu',   'parallel',     
                     'interp',    'inparse', 'snap',  'image',  
                     'opt',       'bspl',    'fft',   'ballocgpu', 'mpi_cxx', 'mpi']
                     
    mpiAcousticfwi2dgpuObj   = gpu.Object('mpiAcousticfwi2dgpu',
                                          'mpiAcousticfwi2d.cpp')
    mpiAcousticfwi2dgpu      = gpu.Program(prefix + 'mpiAcousticfwi2dgpu',
                                      mpiAcousticfwi2dgpuObj, LIBS=libs)
    mpi.Install('../bin/', mpiAcousticfwi2dgpu)
