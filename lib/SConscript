# SConstruct initializing
import os
import sys

Import('env')
Import('mpi')
	
# Cloning environments for different compilers
#if sys.platform == 'darwin' :    # Mac
#    mpi = env.Clone(CC='mpicc', CXX='mpic++')
#else:
#    mpi = env.Clone(CC='mpicc', CXX='mpicxx')

builddir = '../build/'

# Library
file = env.Library(builddir + 'file','file.cpp')
model = env.Library(builddir + 'model','model.cpp')
pml = env.Library(builddir + 'pml','pml.cpp')
der = env.Library(builddir + 'der','der.cpp')
waves = env.Library(builddir + 'waves',['waves.cpp', 'pml.cpp'])
rays = env.Library(builddir + 'rays',['rays.cpp'])
utils = env.Library(builddir + 'utils','utils.cpp')
fft = env.Library(builddir + 'fft','fft.cpp')
data = env.Library(builddir + 'data',['data.cpp','file.cpp', 'utils.cpp', 'geometry.cpp'])
sort = env.Library(builddir + 'sort',['sort.cpp', 'data.cpp'])
interp = env.Library(builddir + 'interp',['interp.cpp', 'data.cpp', 'model.cpp'])
geometry = env.Library(builddir + 'geometry','geometry.cpp')
modelling = env.Library(builddir + 'modelling',['modelling.cpp', 'pml.cpp', 'der.cpp', 'waves.cpp'])
rtm = env.Library(builddir + 'rtm',['rtm.cpp', 'pml.cpp', 'der.cpp', 'waves.cpp', 'revolve.cpp'])
mva = env.Library(builddir + 'mva',['mva.cpp', 'pml.cpp', 'der.cpp', 'waves.cpp', 'revolve.cpp'])
fwi = env.Library(builddir + 'fwi',['fwi.cpp', 'pml.cpp', 'der.cpp', 'waves.cpp', 'revolve.cpp'])
fat = env.Library(builddir + 'fat',['fat.cpp', 'pml.cpp', 'der.cpp', 'rays.cpp'])
revolve = env.Library(builddir + 'revolve',['revolve.cpp', 'waves.cpp', 'file.cpp'])
snap = env.Library(builddir + 'snap',['snap.cpp', 'waves.cpp', 'file.cpp'])
image = env.Library(builddir + 'image',['image.cpp', 'model.cpp'])
opt = env.Library(builddir + 'opt',['opt.cpp'])
bspl = env.Library(builddir + 'bspl',['bspl.cpp'])
if(env['MPI']):
    parallel = mpi.Library(builddir + 'parallel',['parallel.cpp'])
    inversion = mpi.Library(builddir + 'inversion',['inversion.cpp'])
    wemva = mpi.Library(builddir + 'wemva',['wemva.cpp'])
    tomo = mpi.Library(builddir + 'tomo',['tomo.cpp'])
