# SConstruct initializing
import os
import sys

Import('mpi')
Import('gpu')

builddir = '../build/'

#--- MPI libraries
if mpi['ON'] == True:
  file      = mpi.Library(builddir + 'file','file.cpp')
  pml       = mpi.Library(builddir + 'pml','pml.cpp')
  der       = mpi.Library(builddir + 'der','der.cpp')
  domain    = mpi.Library(builddir + 'domain','domain.cpp')
  hilbert   = mpi.Library(builddir + 'hilbert','hilbert.cpp')
  waves     = mpi.Library(builddir   + 'waves',['waves.cpp', 'pml.cpp'])
  rays      = mpi.Library(builddir + 'rays',['rays.cpp'])
  utils     = mpi.Library(builddir + 'utils','utils.cpp')
  fft       = mpi.Library(builddir + 'fft','fft.cpp')
  data      = mpi.Library(builddir + 'data',
            ['data.cpp','file.cpp', 'utils.cpp', 'geometry.cpp'])
  sort      = mpi.Library(builddir + 'sort',['sort.cpp', 'data.cpp'])
  interp    = mpi.Library(builddir + 'interp',['interp.cpp', 'data.cpp'])
  geometry  = mpi.Library(builddir + 'geometry','geometry.cpp')
  modelling = mpi.Library(builddir + 'modelling',
            ['modelling.cpp', 'pml.cpp', 'der.cpp', 'waves.cpp','clock.cpp'])
  rtm       = mpi.Library(builddir + 'rtm', 
            ['rtm.cpp', 'pml.cpp', 'der.cpp', 'waves.cpp', 'revolve.cpp'])
  mva       = mpi.Library(builddir + 'mva',
            ['mva.cpp', 'pml.cpp', 'der.cpp', 'waves.cpp', 'revolve.cpp'])
  fwi       = mpi.Library(builddir + 'fwi',
            ['fwi.cpp', 'pml.cpp', 'der.cpp', 'waves.cpp', 'revolve.cpp'])
  fat       = mpi.Library(builddir + 'fat',
            ['fat.cpp', 'pml.cpp', 'der.cpp', 'rays.cpp'])
  kdmig     = mpi.Library(builddir + 'kdmig',
            ['kdmig.cpp', 'pml.cpp', 'der.cpp', 'rays.cpp'])
  lsrtm     = mpi.Library(builddir + 'lsrtm',
            ['lsrtm.cpp', 'pml.cpp', 'der.cpp', 'waves.cpp', 'revolve.cpp'])
  revolve   = mpi.Library(builddir + 'revolve',
            ['revolve.cpp', 'waves.cpp', 'file.cpp'])
  snap      = mpi.Library(builddir + 'snap',['snap.cpp', 'waves.cpp', 
              'file.cpp'])
  ttable    = mpi.Library(builddir + 'ttable',
            ['ttable.cpp', 'rays.cpp', 'file.cpp'])
  opt       = mpi.Library(builddir + 'opt',['opt.cpp'])
  bspl      = mpi.Library(builddir + 'bspl',['bspl.cpp'])
  kdtree    = mpi.Library(builddir + 'kdtree',['kdtree.cpp'])
  image     = mpi.Library(builddir + 'image',
            ['image.cpp', 'model.cpp', 'domain.cpp'])
  model     = mpi.Library(builddir + 'model',
            ['model.cpp', 'domain.cpp'])
  parallel  = mpi.Library(builddir + 'parallel', ['parallel.cpp'])
  inversion = mpi.Library(builddir + 'inversion',['inversion.cpp'])
  wemva     = mpi.Library(builddir + 'wemva',    ['wemva.cpp'])
  tomo      = mpi.Library(builddir + 'tomo',     ['tomo.cpp'])
  lsmiginv  = mpi.Library(builddir + 'lsmiginv', ['lsmiginv.cpp'])
  kdmva     = mpi.Library(builddir + 'kdmva',    ['kdmva.cpp'])
  ballocpu  = mpi.Library(builddir+  'ballocpu', ['ballocpu.cpp'])

#--- GPU libraries
if gpu['ON'] == True :
  ballocgpu      = gpu.Library(builddir+ 'ballocgpu',
                               ['ballocgpu.cpp', 'gpu.cpp'])
  dergpu         = gpu.Library(builddir + 'dergpu',
                               ['dergpu.cpp','diff.cpp'])
  modellingpuObj = gpu.Object('modellingpu.o', 'modelling.cpp')
  clockgpuObj    = gpu.Object('clockgpu.o', 'clock.cpp')
  ac2dObj        = gpu.Object('ac2d.o', 'ac2d.cpp')
  ac2dcObj       = gpu.Object('ac2dc.o', 'ac2dc.cpp')
  modellingpu    = gpu.Library(builddir + 'modellingpu',
                            ['modellingpu.o','clockgpu.o'])
  wavesgpuObj    = gpu.Object('wavesgpu.o', 'wavesgpu.cpp')
  wavesgpu       = gpu.Library(builddir + 'wavesgpu',
                            ['wavesgpu.o','clockgpu.o', 'ac2d.o','ac2dc.o'])
