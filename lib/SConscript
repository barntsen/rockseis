# SConstruct initializing
import os
import sys

Import('env')
	
# Cloning environments for different compilers
if sys.platform == 'darwin' :    # Mac
    mpi = env.Clone(CC='mpicc', CXX='mpic++')
else:
    mpi = env.Clone(CC='mpicc', CXX='mpicxx')

builddir = '../build/'

# Library
file = env.Library(builddir + 'file','file.cpp')
model = env.Library(builddir + 'model','model.cpp')
pml = env.Library(builddir + 'pml','pml.cpp')
der = env.Library(builddir + 'der','der.cpp')
waves = env.Library(builddir + 'waves',['waves.cpp', 'pml.cpp'])
utils = env.Library(builddir + 'utils','utils.cpp')
data = env.Library(builddir + 'data',['data.cpp','file.cpp', 'utils.cpp', 'geometry.cpp'])
sort = env.Library(builddir + 'sort',['sort.cpp', 'data.cpp'])
interp = env.Library(builddir + 'interp',['interp.cpp', 'data.cpp', 'model.cpp'])
geometry = env.Library(builddir + 'geometry','geometry.cpp')
modelling = env.Library(builddir + 'modelling',['modelling.cpp', 'pml.cpp', 'der.cpp', 'waves.cpp'])
rtm = env.Library(builddir + 'rtm',['rtm.cpp', 'pml.cpp', 'der.cpp', 'waves.cpp', 'revolve.cpp'])
parallel = mpi.Library(builddir + 'parallel','parallel.cpp')
revolve = env.Library(builddir + 'revolve',['revolve.cpp', 'waves.cpp', 'file.cpp'])
snap = env.Library(builddir + 'snap',['snap.cpp', 'waves.cpp', 'file.cpp'])
image = env.Library(builddir + 'image',['image.cpp'])


# 



