/* This file is automatically generated. DO NOT EDIT! */

#ifndef _sig_h
#define _sig_h

#include <stdio.h>
#include <stdlib.h>
#include "kiss_fft.h" 
#include "alloc.h"
#include "error.h"
#include "komplex.h"
#include "_defs.h"

#include "_bool.h"
#include "c99.h"

/* Constants */
#define PI 3.14159265358979323846


typedef struct weif1d *sig_cfg_fft1d;


struct weif1d{
	int            n1;
	kiss_fft_cfg   forw1; /*   FFT on axis 1 */
	kiss_fft_cfg   invs1;
	kiss_fft_cpx  *ctmp1; /* temp array */
	float       fftscale; /* FFT scale  */
};


typedef struct weif2d *sig_cfg_fft2d;


struct weif2d{
	int            n1,n2;
	kiss_fft_cfg   forw1; /*   FFT on axis 1 */
	kiss_fft_cfg   invs1;
	kiss_fft_cfg   forw2; /*   FFT on axis 2 */
	kiss_fft_cfg   invs2;
	kiss_fft_cpx  *ctmp1; /* temp array */
	kiss_fft_cpx  *ctmp2; /* temp array */
	float       fftscale; /* FFT scale  */
};


typedef struct weif3d *sig_cfg_fft3d;


struct weif3d{
	int            n1,n2,n3;
	kiss_fft_cfg   forw1; /*   FFT on axis 1 */
	kiss_fft_cfg   invs1;
	kiss_fft_cfg   forw2; /*   FFT on axis 2 */
	kiss_fft_cfg   invs2;
	kiss_fft_cfg   forw3; /*   FFT on axis 3 */
	kiss_fft_cfg   invs3;
	kiss_fft_cpx  *ctmp1; /* temp array */
	kiss_fft_cpx  *ctmp2; /* temp array */
	kiss_fft_cpx  *ctmp3; /* temp array */
	float       fftscale; /* FFT scale  */
};


/* Functions */ 
/*------------------------------------------------------------*/
sig_cfg_fft1d sig_fft1d_init(int n1_);
/*< initialize 1d fft >*/


void sig_fft1d_close(sig_cfg_fft1d fft);
/*< close  fft >*/


/*------------------------------------------------------------*/
void sig_fft1d(bool inv          /* inverse/forward flag */, 
		kiss_fft_cpx *pp /* [1...n1] */,
		sig_cfg_fft1d fft);
/*< apply 1-D FFT >*/


/*------------------------------------------------------------*/
sig_cfg_fft2d sig_fft2d_init(int n1_, int n2_);
/*< initialize  2d fft >*/


/*------------------------------------------------------------*/
void sig_fft2d_close(sig_cfg_fft2d fft);
/*< close  fft >*/


/*------------------------------------------------------------*/
void sig_fft2d(bool inv          /* inverse/forward flag */, 
		kiss_fft_cpx **pp /* [1...n2][1...n1] */,
		sig_cfg_fft2d fft);
/*< apply 2-D FFT >*/


void sig_taper(float *data, int n, int ntaper);
/*<Apply cosine taper on both ends of a trace>*/


void sig_smoother1d(float *data, int n1, int pad, float perc1);
/*<Apply 2D gaussian low-pass filter in the wavenumber domain>*/


void sig_smoother2d(float **data, int n1, int n2, int pad, float perc1, float perc2);
/*<Apply 2D gaussian low-pass filter in the wavenumber domain>*/


/*------------------------------------------------------------*/
sig_cfg_fft3d sig_fft3d_init(int n1_, int n2_, int n3_);
/*< initialize  3d fft >*/


/*------------------------------------------------------------*/
void sig_fft3d_close(sig_cfg_fft3d fft);
/*< close  fft >*/


/*------------------------------------------------------------*/
void sig_fft3d(bool inv          /* inverse/forward flag */, 
		kiss_fft_cpx ***pp /* [1...n3][1...n2][1...n1] */,
		sig_cfg_fft3d fft);
/*< apply 3-D FFT >*/


void sig_smoother3d(float ***data, int n1, int n2, int n3, int pad, float perc1, float perc2, float perc3);
/*<Apply 3D gaussian low-pass filter in the frequency domain>*/


void sig_gauss(float *pulse, float f0, float t0, float dt, int nt, int order);
/*< Creates 0th, 1th or 2nd order derivative of Gaussian wavelet >*/


void sig_1Dsinc_lanczos(float *op, int N, float s);
/*< Creates Sinc-lanczos shift operator>*/


void sig_turkey(float *pulse, float f0, float f1, float f2, float f3, float t0, double dt, int nt);
/*< Creates wavelet with flat pass band>*/

void sig_filt(float *pulse, float f0, float f1, float f2, float f3, double dt, int nt);
/*< Filters with a hamming window>*/

#endif
